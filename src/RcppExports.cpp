// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fyg_rit_orig
NumericVector fyg_rit_orig(NumericVector surv_cens, NumericVector beta_res, NumericMatrix x_mat);
RcppExport SEXP rankAFT_fyg_rit_orig(SEXP surv_censSEXP, SEXP beta_resSEXP, SEXP x_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type surv_cens(surv_censSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_res(beta_resSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_mat(x_matSEXP);
    rcpp_result_gen = Rcpp::wrap(fyg_rit_orig(surv_cens, beta_res, x_mat));
    return rcpp_result_gen;
END_RCPP
}
// fyg_rit_smooth
NumericVector fyg_rit_smooth(NumericVector surv_cens, NumericVector beta_res, NumericMatrix x_mat, double h);
RcppExport SEXP rankAFT_fyg_rit_smooth(SEXP surv_censSEXP, SEXP beta_resSEXP, SEXP x_matSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type surv_cens(surv_censSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_res(beta_resSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(fyg_rit_smooth(surv_cens, beta_res, x_mat, h));
    return rcpp_result_gen;
END_RCPP
}
// A_n_calc
NumericVector A_n_calc(NumericVector surv_cens, NumericVector beta_res, NumericMatrix x_mat, double h);
RcppExport SEXP rankAFT_A_n_calc(SEXP surv_censSEXP, SEXP beta_resSEXP, SEXP x_matSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type surv_cens(surv_censSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_res(beta_resSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(A_n_calc(surv_cens, beta_res, x_mat, h));
    return rcpp_result_gen;
END_RCPP
}
// V_n_calc
NumericVector V_n_calc(NumericVector surv_cens, NumericVector beta_res, NumericMatrix x_mat, double h);
RcppExport SEXP rankAFT_V_n_calc(SEXP surv_censSEXP, SEXP beta_resSEXP, SEXP x_matSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type surv_cens(surv_censSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_res(beta_resSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x_mat(x_matSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(V_n_calc(surv_cens, beta_res, x_mat, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"rankAFT_fyg_rit_orig", (DL_FUNC) &rankAFT_fyg_rit_orig, 3},
    {"rankAFT_fyg_rit_smooth", (DL_FUNC) &rankAFT_fyg_rit_smooth, 4},
    {"rankAFT_A_n_calc", (DL_FUNC) &rankAFT_A_n_calc, 4},
    {"rankAFT_V_n_calc", (DL_FUNC) &rankAFT_V_n_calc, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_rankAFT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
